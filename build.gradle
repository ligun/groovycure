apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'application'

/*
plugins {
  id 'groovy'
  id 'maven'
  id 'com.jfrog.bintray' version '1.0'
}
*/

archivesBaseName = 'groovycure'
group = 'groovycure'
mainClassName = 'groovycure.Precure'
version = '0.0.6'

repositories {
    mavenCentral()
}

dependencies {
    compile module('org.codehaus.groovy:groovy-all:2.3.2') {
        dependency('commons-cli:commons-cli:1.2')
    }
    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
}

task javadocJar(type: Jar, dependsOn: groovydoc) {
    classifier = 'javadoc'
    from groovydoc.destinationDir
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "file:${buildDir}")
            pom {
                project {
                    inceptionYear '2015'
                    packaging 'jar'
                    licenses {
                        license {
                            name 'The MIT License'
                            url 'http://opensource.org/licenses/MIT'
                            distribution 'repo'
                        }
                    }
                }
            }
        }
    }
}

task getDir << {
    println new File(System.getProperty('user.home'), '.gradle/cache/groovycure').absolutePath
}

install.doFirst {
    def dir = null

    dir = new File(System.getProperty('user.home'), '.gradle/cache/groovycure').absolutePath
    if( new File(dir).exists() ){
        ant.echo("Remove gradle-cache-dir : ${dir}")
        ant.delete(dir:dir)
    }

    dir = new File(System.getProperty('user.home'), '.groovy/grapes/groovycure').absolutePath
    if( new File(dir).exists() ){
        ant.echo("Remove gradle-cache-dir : ${dir}")
        ant.delete(dir:dir)
    }
}

run {
    if(project.hasProperty('args')) {
        args project.args.split(/s+/)
    }
}

task jarsh(type: Jar, dependsOn: jar) {
    baseName = "${project.name}-fullpack"

    manifest {
        attributes 'Main-Class': 'groovycure.Precure'
    }
    from configurations.compile.collect{ it.isDirectory()? it : zipTree(it) }
    from "$buildDir/classes/main"
    from "$buildDir/resources/main"

    doLast {
        def jarshDir = new File("${buildDir}/jarsh")
        jarshDir.mkdir()

        def shell = new File("${jarshDir}/precure")
        def bat = new File("${jarshDir}/precure.bat")
        def jar = new File("${buildDir}/libs/${baseName}-${version}.jar")

        shell.text = """\
#!/bin/sh
java -jar "\$0" "\$@"
exit \$?
"""
        shell << jar.bytes

        bat.text = """\
@echo off
java -jar "%0" %*\r\n\
exit /B 1\r\n\
"""
        bat << jar.bytes
    }
}
